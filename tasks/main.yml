- name: Ensure we have support for the provider(s) specified
  connection: local
  fail: msg="I don't know how to setup email on {{ provider }}."
  when: "'{{ provider }}' not in ['aws', 'digitalocean']"

- name: Ensure that we have API keys defined for providers
  connection: local
  debug: msg=TODO

- name: Work out whether we already have servers in inventory or have to create
  connection: local
  set_fact:
    mailserver_exists: true
  when: "{{ groups['emailserver'] is defined and groups['emailserver'] | length >= 1 }}"

- block:
    - name: Check if SSH key is on disk
      stat: path=email.key
      register: ssh_keyfile

    - name: Print out ssh keyfile stat
      debug: msg="{{ ssh_keyfile }}"

    - name: Generate SSH key if we need it
      command: "ssh-keygen -N \"\" -f email.key"
      register: ssh_keygen_output
      when: "not {{ ssh_keyfile.stat.exists }}"

    - name: Get ssh public key
      set_fact:
        ssh_pubkey_contents: "{{ lookup('file', 'email.key.pub') }}"

    - name: Print pubkey
      debug: msg="{{ ssh_pubkey_contents }}"

    - name: Ensure we have an SSH key to enable access
      connection: local
      digital_ocean:
        state: present
        command: ssh
        name: email_ssh_key
        ssh_pub_key: "{{ ssh_pubkey_contents }}"
        api_token: "{{ digital_ocean_token }}"
      register: email_ssh_key

    - name: Print out SSH key details
      connection: local
      debug: msg="{{ email_ssh_key }}"

    - name: Ensure that the VM(s) are present on provider infrastructure
      connection: local
      digital_ocean:
        state: present
        command: droplet
        name: email
        ssh_key_ids: "[{{ email_ssh_key.ssh_key.id }}]"
        api_token: "{{ digital_ocean_token }}"
        size_id: 2gb
        region_id: nyc3
        image_id: ubuntu-16-04-x64
        wait_timeout: 500
      register: email_droplet

    - name: Print out droplet details
      connection: local
      debug: msg="{{ email_droplet }}"

    - name: Wait for SSH to come up
      wait_for: host={{ email_droplet.droplet.ip_address }} port=22 delay=30 timeout=320 state=started

    - name: Add tags to droplet
      digital_ocean_tag:
        name: "emailserver"
        api_token: "{{ digital_ocean_token }}"
        resource_id: "{{ email_droplet.droplet.id }}"
        state: present

      # TODO: Add logic to use 'root' user when DO, 'ubuntu' when AWS
    - name: Add Email instance to host inventory group
      connection: local
      add_host: hostname={{ item.ip_address }} groupname=emailserver ansible_ssh_user=root ansible_ssh_private_key_file="email.key" host_key_checking=False
      with_items:
        - "{{ email_droplet.droplet }}"

  when: "{{ mailserver_exists is not defined }}"

- name: Ensure we set user and key to use by setting Ansible group vars
  debug: msg=TODO
